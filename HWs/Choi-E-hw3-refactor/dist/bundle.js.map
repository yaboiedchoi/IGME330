{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://choi-e-hw3/./src/audio.ts","webpack://choi-e-hw3/./src/utils.ts","webpack://choi-e-hw3/./src/main.ts","webpack://choi-e-hw3/./src/classes/eyes.ts","webpack://choi-e-hw3/./src/classes/eyelid.ts"],"sourcesContent":["// 1 - WebAudio context, exported for public use\r\nexport let audioCtx: AudioContext;\r\n\r\n// **Private properties** - not exported or accessible outside this module\r\nlet element: HTMLAudioElement;\r\nlet sourceNode: MediaElementAudioSourceNode;\r\nlet analyserNode: AnalyserNode;\r\nlet gainNode: GainNode;\r\n\r\n// Biquad filter nodes\r\nlet biquadFilter: BiquadFilterNode;\r\nlet lowShelfBiquadFilter: BiquadFilterNode;\r\n\r\n// 3 - Fake enumeration using a frozen object\r\nconst DEFAULTS = Object.freeze({\r\n  gain: 0.5,\r\n  numSamples: 256,\r\n});\r\n\r\n// 4 - Typed array to hold audio frequency data\r\nlet audioData: Uint8Array = new Uint8Array(DEFAULTS.numSamples / 2);\r\n\r\n// **Public methods**\r\nexport const setupWebAudio = (filePath: string): void => {\r\n  // 1 - AudioContext for WebAudio API\r\n  const AudioContext = window.AudioContext || (window as any).webkitAudioContext;\r\n  audioCtx = new AudioContext();\r\n\r\n  // 2 - Create an <audio> element\r\n  element = new Audio();\r\n\r\n  // 3 - Load sound file into the audio element\r\n  loadSoundFile(filePath);\r\n\r\n  // 4 - Create a source node from the <audio> element\r\n  sourceNode = audioCtx.createMediaElementSource(element);\r\n\r\n  // Create high shelf biquad filter\r\n  biquadFilter = audioCtx.createBiquadFilter();\r\n  biquadFilter.type = \"highshelf\";\r\n\r\n  // Create low shelf biquad filter\r\n  lowShelfBiquadFilter = audioCtx.createBiquadFilter();\r\n  lowShelfBiquadFilter.type = \"lowshelf\";\r\n\r\n  // 5 - Create an analyser node\r\n  analyserNode = audioCtx.createAnalyser();\r\n\r\n  /*\r\n   * We request DEFAULTS.numSamples number of samples (bins) spaced equally\r\n   * across the sound spectrum.\r\n   *\r\n   * If DEFAULTS.numSamples (fftSize) is 256, bins correspond to frequencies.\r\n   */\r\n  analyserNode.fftSize = DEFAULTS.numSamples;\r\n\r\n  // 7 - Create a gain (volume) node\r\n  gainNode = audioCtx.createGain();\r\n  gainNode.gain.value = DEFAULTS.gain;\r\n\r\n  // 8 - Connect nodes to build the audio graph\r\n  sourceNode.connect(biquadFilter);\r\n  biquadFilter.connect(lowShelfBiquadFilter);\r\n  lowShelfBiquadFilter.connect(analyserNode);\r\n\r\n  analyserNode.connect(gainNode);\r\n  gainNode.connect(audioCtx.destination);\r\n};\r\n\r\nexport const loadSoundFile = (filePath: string): void => {\r\n  element.src = filePath;\r\n};\r\n\r\nexport const playCurrentSound = (): void => {\r\n  element.play();\r\n};\r\n\r\nexport const pauseCurrentSound = (): void => {\r\n  element.pause();\r\n};\r\n\r\nexport const setVolume = (value: number | string): void => {\r\n  gainNode.gain.value = Number(value);\r\n};\r\n\r\n// Export other key nodes for external use\r\nexport {\r\n  analyserNode,\r\n  biquadFilter,\r\n  lowShelfBiquadFilter,\r\n};\r\n","// TypeScript: Read app data with a callback\r\nconst readAppData = (callback: (data: any) => void): void => {\r\n  const xhr = new XMLHttpRequest();\r\n  xhr.open('GET', '../data/av-data.json', true);\r\n\r\n  xhr.onload = () => {\r\n    if (xhr.status === 200) {\r\n      const data = JSON.parse(xhr.responseText);\r\n      callback(data);\r\n    } else {\r\n      console.error('Error reading the shape data');\r\n    }\r\n  };\r\n\r\n  xhr.onerror = () => {\r\n    console.error('Request failed');\r\n  };\r\n\r\n  xhr.send();\r\n};\r\n\r\n// TypeScript: Make color function with RGB and optional alpha\r\nconst makeColor = (red: number, green: number, blue: number, alpha: number = 1): string => {\r\n  return `rgba(${red},${green},${blue},${alpha})`;\r\n};\r\n\r\n// TypeScript: Get a random number between min and max\r\nconst getRandom = (min: number, max: number): number => {\r\n  return Math.random() * (max - min) + min;\r\n};\r\n\r\n// TypeScript: Generate a random color within a certain range for RGB values\r\nconst getRandomColor = (): string => {\r\n  const floor = 35; // so that colors are not too bright or too dark \r\n  const getByte = (): number => getRandom(floor, 255 - floor);\r\n  return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n};\r\n\r\n// TypeScript: Create a linear gradient\r\nconst getLinearGradient = (\r\n  ctx: CanvasRenderingContext2D,\r\n  startX: number,\r\n  startY: number,\r\n  endX: number,\r\n  endY: number,\r\n  colorStops: { percent: number; color: string }[]\r\n): CanvasGradient => {\r\n  let lg = ctx.createLinearGradient(startX, startY, endX, endY);\r\n  for (let stop of colorStops) {\r\n    lg.addColorStop(stop.percent, stop.color);\r\n  }\r\n  return lg;\r\n};\r\n\r\n// TypeScript: Create a radial gradient\r\nconst getRadialGradient = (\r\n  ctx: CanvasRenderingContext2D,\r\n  x1: number,\r\n  y1: number,\r\n  innerRadius: number,\r\n  x2: number,\r\n  y2: number,\r\n  outerRadius: number,\r\n  colorStops: { percent: number; color: string }[]\r\n): CanvasGradient => {\r\n  let rg = ctx.createRadialGradient(x1, y1, innerRadius, x2, y2, outerRadius);\r\n  for (let stop of colorStops) {\r\n    rg.addColorStop(stop.percent, stop.color);\r\n  }\r\n  return rg;\r\n};\r\n\r\n// TypeScript: Go fullscreen with element\r\nconst goFullscreen = (element: HTMLElement): void => {\r\n  if (element.requestFullscreen) {\r\n    element.requestFullscreen();\r\n  }\r\n  // .. and do nothing if the method is not supported\r\n};\r\n\r\nexport { makeColor, getRandomColor, getLinearGradient, getRadialGradient, goFullscreen, readAppData };\r\n","import * as audio from './audio';\r\nimport * as utils from './utils';\r\nimport * as canvas from './canvas';\r\n\r\ninterface DrawParams {\r\n  showGradient: boolean;\r\n  showBars: boolean;\r\n  showCircles: boolean;\r\n  showNoise: boolean;\r\n  showInvert: boolean;\r\n  showEmboss: boolean;\r\n  byteFreq: boolean;\r\n  mouthType: string;\r\n  voiceType: string;\r\n}\r\n\r\nconst drawParams: DrawParams = {\r\n  showGradient: false,\r\n  showBars: true,\r\n  showCircles: false,\r\n  showNoise: false,\r\n  showInvert: false,\r\n  showEmboss: false,\r\n  byteFreq: true,\r\n  mouthType: \"mouth1\",\r\n  voiceType: \"voice2\",\r\n}\r\n\r\nconst fps: number = 60;\r\n\r\nlet json: any;\r\n\r\nlet audioPathList: string[] = [];\r\n\r\nconst DEFAULTS: { [key: string]: string } = {};\r\n\r\nutils.readAppData((jsonData: any) => {\r\n  DEFAULTS.sound1 = jsonData[\"audio\"][\"1\"][\"path\"];\r\n  DEFAULTS.sound2 = jsonData[\"audio\"][\"1\"][\"path\"];\r\n  DEFAULTS.sound3 = jsonData[\"audio\"][\"1\"][\"path\"];\r\n\r\n  document.title = jsonData.title;\r\n  (document.querySelector(\"#title\") as HTMLInputElement).innerHTML = jsonData.title;\r\n\r\n  (document.querySelector(\"#volume-slider\") as HTMLInputElement).value = jsonData[\"default-values\"].volume;\r\n  (document.querySelector(\"#volume-label\") as HTMLLabelElement).innerHTML = `${Math.round(jsonData[\"default-values\"].volume / 2 * 100)}`;\r\n  \r\n  const volumeSlider: HTMLInputElement = document.querySelector(\"#volume-slider\") as HTMLInputElement;\r\n  const volumeLabel: HTMLElement = document.querySelector(\"#volume-label\") as HTMLElement;\r\n\r\n  volumeSlider.oninput = (e: Event) => {\r\n    audio.setVolume((e.target as HTMLInputElement).value);\r\n    volumeLabel.innerHTML = `${Math.round(100 * (Number((e.target as HTMLInputElement).value)) / 2)}`;\r\n  }\r\n\r\n  for (let key in jsonData[\"audio\"]) {\r\n    DEFAULTS[\"sound\" + key] = jsonData[\"audio\"][key][\"path\"];\r\n  }\r\n  console.log(DEFAULTS);\r\n})\r\n\r\nconst init = (): void => {\r\n  console.log(\"init called\");\r\n  console.log(`Testing utils.getRandomColor() import: ${utils.getRandomColor()}`);\r\n  audio.setupWebAudio(DEFAULTS.sound1);\r\n  const canvasElement: HTMLCanvasElement = document.querySelector(\"canvas\") as HTMLCanvasElement;\r\n  setupUI(canvasElement);\r\n  canvas.setupCanvas(canvasElement, audio.analyserNode);\r\n\r\n  loop();\r\n}\r\n\r\nconst setupUI = (canvasElement: HTMLCanvasElement): void => {\r\n  // setup navbar\r\n  const burgerIcon = document.querySelector('#burger') as HTMLElement;\r\n  const navbarMenu = document.querySelector('#nav-links') as HTMLElement;\r\n\r\n  burgerIcon.addEventListener('click', () => {\r\n    navbarMenu.classList.toggle('is-active');\r\n  });\r\n  \r\n  const fsButton: HTMLElement = document.querySelector(\"#fs-btn\") as HTMLElement;\r\n\r\n  fsButton.onclick = (e: MouseEvent) => {\r\n    console.log(\"goFullscreen() called\");\r\n    utils.goFullscreen(canvasElement);\r\n  };\r\n\r\n  const playButton: HTMLElement = document.querySelector(\"#play-btn\") as HTMLElement;\r\n  playButton.onclick = (e: MouseEvent) => {\r\n    console.log(`audioCtx.state before = ${audio.audioCtx.state}`);\r\n\r\n    if (audio.audioCtx.state === \"suspended\") {\r\n      audio.audioCtx.resume();\r\n    }\r\n    console.log(`audioCtx.state after = ${audio.audioCtx.state}`);\r\n    if ((e.target as HTMLElement).dataset.playing === \"no\") {\r\n      audio.playCurrentSound();\r\n      (e.target as HTMLElement).dataset.playing = \"yes\";\r\n    } else {\r\n      audio.pauseCurrentSound();\r\n      (e.target as HTMLElement).dataset.playing = \"no\";\r\n    }\r\n\r\n    const volumeSlider: HTMLInputElement = document.querySelector(\"#volume-slider\") as HTMLInputElement;\r\n    volumeSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n    const trackSelect: HTMLSelectElement = document.querySelector(\"#track-select\") as HTMLSelectElement;\r\n    trackSelect.onchange = (e: Event) => {\r\n      audio.loadSoundFile((e.target as HTMLSelectElement).value);\r\n      if (playButton.dataset.playing === \"yes\") {\r\n        playButton.dispatchEvent(new MouseEvent(\"click\"));\r\n      }\r\n    }\r\n  }\r\n\r\n  const useByteFrequencyDataCheckbox: HTMLInputElement = document.querySelector(\"#byte-freq\") as HTMLInputElement;\r\n  useByteFrequencyDataCheckbox.onchange = (e: Event) => {\r\n    drawParams.byteFreq = (e.target as HTMLInputElement).checked;\r\n  }\r\n\r\n  const mouthTypeSelect: HTMLSelectElement = document.querySelector(\"#mouth-select\") as HTMLSelectElement;\r\n  mouthTypeSelect.onchange = (e: Event) => {\r\n    drawParams.mouthType = (e.target as HTMLSelectElement).value;\r\n  }\r\n\r\n  const voiceTypeSelect: HTMLSelectElement = document.querySelector(\"#voice-select\") as HTMLSelectElement;\r\n  voiceTypeSelect.onchange = (e: Event) => {\r\n    drawParams.voiceType = (e.target as HTMLSelectElement).value;\r\n    console.log(drawParams.voiceType);\r\n    switch (drawParams.voiceType) {\r\n      case \"voice1\":\r\n        toggleHighshelf(false);\r\n        toggleLowshelf(true);\r\n        break;\r\n      case \"voice2\":\r\n        toggleLowshelf(false);\r\n        toggleHighshelf(false);\r\n        break;\r\n      case \"voice3\":\r\n        toggleLowshelf(false);\r\n        toggleHighshelf(true);\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nconst loop = (): void => {\r\n  setTimeout(loop, 1000 / fps);\r\n  canvas.draw(drawParams);\r\n}\r\n\r\nconst toggleHighshelf = (status: boolean): void => {\r\n  if (status) {\r\n    console.log(\"highshelf on\");\r\n    audio.biquadFilter.frequency.setValueAtTime(1000, audio.audioCtx.currentTime);\r\n    audio.biquadFilter.gain.setValueAtTime(10, audio.audioCtx.currentTime);\r\n    audio.lowShelfBiquadFilter.frequency.setValueAtTime(1000, audio.audioCtx.currentTime);\r\n    audio.lowShelfBiquadFilter.gain.setValueAtTime(-20, audio.audioCtx.currentTime);\r\n  } else {\r\n    console.log(\"highshelf off\");\r\n    audio.biquadFilter.gain.setValueAtTime(0, audio.audioCtx.currentTime);\r\n    audio.lowShelfBiquadFilter.gain.setValueAtTime(0, audio.audioCtx.currentTime);\r\n  }\r\n}\r\n\r\nconst toggleLowshelf = (status: boolean): void => {\r\n  if (status) {\r\n    console.log(\"lowshelf on\");\r\n    audio.biquadFilter.frequency.setValueAtTime(1000, audio.audioCtx.currentTime);\r\n    audio.biquadFilter.gain.setValueAtTime(-20, audio.audioCtx.currentTime);\r\n    audio.lowShelfBiquadFilter.frequency.setValueAtTime(1000, audio.audioCtx.currentTime);\r\n    audio.lowShelfBiquadFilter.gain.setValueAtTime(10, audio.audioCtx.currentTime);\r\n  } else {\r\n    console.log(\"lowshelf off\");\r\n    audio.biquadFilter.gain.setValueAtTime(0, audio.audioCtx.currentTime);\r\n    audio.lowShelfBiquadFilter.gain.setValueAtTime(0, audio.audioCtx.currentTime);\r\n  }\r\n}\r\n\r\nexport { init };","import { getRadialGradient } from \"../utils\";\r\n\r\nexport class Eyes {\r\n  // Private properties\r\n  private gradient: CanvasGradient | null = null;\r\n  private colorStops: { percent: number; color: string }[] = [\r\n    { percent: 0, color: \"red\" },\r\n    { percent: 1, color: \"black\" },\r\n  ];\r\n  private r = 0;\r\n  private g = 0;\r\n  private b = 0;\r\n\r\n  // Define public properties\r\n  private ctx: CanvasRenderingContext2D;\r\n  private x: number;\r\n  private y: number;\r\n  private radius: number;\r\n  private audioData: Uint8Array;\r\n\r\n  constructor(\r\n    ctx: CanvasRenderingContext2D,\r\n    x: number,\r\n    y: number,\r\n    radius: number,\r\n    audioData: Uint8Array\r\n  ) {\r\n    this.ctx = ctx;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.radius = radius;\r\n    this.audioData = audioData;\r\n  }\r\n\r\n  update(r: number, g: number, b: number): void {\r\n    // Set color\r\n    this.r = r;\r\n    this.g = g;\r\n    this.b = b;\r\n\r\n    // Calculate alpha based on audio data\r\n    let alphaOffset = 0;\r\n    let alpha = 1;\r\n    for (let i = 0; i < this.audioData.length; i++) {\r\n      alphaOffset += this.audioData[i] / 255;\r\n    }\r\n    alphaOffset /= this.audioData.length;\r\n    alphaOffset *= 0.75;\r\n    alpha -= alphaOffset;\r\n\r\n    // Update color stops\r\n    this.colorStops = [\r\n      { percent: 0, color: `rgba(${this.r},${this.g},${this.b},${alpha})` },\r\n      { percent: 1, color: \"black\" },\r\n    ];\r\n\r\n    // Update gradient\r\n    this.gradient = getRadialGradient(\r\n      this.ctx,\r\n      this.x,\r\n      this.y + 20,\r\n      5,\r\n      this.x,\r\n      this.y,\r\n      this.radius,\r\n      this.colorStops\r\n    );\r\n  }\r\n\r\n  draw(): void {\r\n    if (!this.gradient) {\r\n      console.warn(\"Gradient is not initialized. Call update() first.\");\r\n      return;\r\n    }\r\n    this.ctx.save();\r\n    this.ctx.fillStyle = this.gradient;\r\n    this.ctx.beginPath();\r\n    this.ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\r\n    this.ctx.fill();\r\n    this.ctx.closePath();\r\n    this.ctx.restore();\r\n  }\r\n}\r\n","export class Eyelid {\r\n  private eyelidOffset = 0;\r\n\r\n  // Define the types of the class properties\r\n  private ctx: CanvasRenderingContext2D;\r\n  private topLeftX: number;\r\n  private topLeftY: number;\r\n  private bottomLeftX: number;\r\n  private bottomLeftY: number;\r\n  private shortWidth: number;\r\n  private wideWidth: number;\r\n  private audioData: Uint8Array;\r\n\r\n  constructor(\r\n    ctx: CanvasRenderingContext2D,\r\n    topLeftX: number,\r\n    topLeftY: number,\r\n    bottomLeftX: number,\r\n    bottomLeftY: number,\r\n    shortWidth: number,\r\n    wideWidth: number,\r\n    audioData: Uint8Array\r\n  ) {\r\n    this.ctx = ctx;\r\n    this.topLeftX = topLeftX;\r\n    this.topLeftY = topLeftY;\r\n    this.bottomLeftX = bottomLeftX;\r\n    this.bottomLeftY = bottomLeftY;\r\n    this.shortWidth = shortWidth;\r\n    this.wideWidth = wideWidth;\r\n    this.audioData = audioData;\r\n  }\r\n\r\n  // Update method to calculate eyelid offset\r\n  update(): void {\r\n    this.eyelidOffset = 0;\r\n    for (let i = 0; i < this.audioData.length; i++) {\r\n      this.eyelidOffset += this.audioData[i] / 255;\r\n    }\r\n    this.eyelidOffset /= this.audioData.length;\r\n  }\r\n\r\n  // Draw method to render the eyelid\r\n  draw(): void {\r\n    this.ctx.save();\r\n    this.ctx.fillStyle = \"gray\";\r\n    this.ctx.translate(0, -this.eyelidOffset * 40);\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(this.topLeftX, this.topLeftY);\r\n    this.ctx.lineTo(this.topLeftX + this.shortWidth, this.topLeftY);\r\n    this.ctx.lineTo(this.bottomLeftX + this.wideWidth, this.bottomLeftY);\r\n    this.ctx.lineTo(this.bottomLeftX, this.bottomLeftY);\r\n    this.ctx.fill();\r\n    this.ctx.closePath();\r\n    this.ctx.restore();\r\n  }\r\n}\r\n"],"names":["callback","xhr","DEFAULTS","Object","freeze","gain","numSamples","Uint8Array","ctx","x","y","radius","audioData","gradient","colorStops","percent","color","r","g","b","this","update","alphaOffset","alpha","i","length","x1","y1","innerRadius","x2","y2","outerRadius","rg","createRadialGradient","addColorStop","getRadialGradient","draw","save","fillStyle","beginPath","arc","Math","PI","fill","closePath","restore","console","warn","topLeftX","topLeftY","bottomLeftX","bottomLeftY","shortWidth","wideWidth","eyelidOffset","translate","moveTo","lineTo","jsonData","sound1","sound2","sound3","document","title","querySelector","innerHTML","value","volume","round","volumeSlider","volumeLabel","key","oninput","e","target","gainNode","Number","log","XMLHttpRequest","open","onload","status","data","JSON","parse","responseText","error","onerror","send"],"sourceRoot":""}