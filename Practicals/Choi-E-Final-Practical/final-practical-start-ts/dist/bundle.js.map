{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://final-practical/./src/api.ts","webpack://final-practical/./src/ui.ts","webpack://final-practical/webpack/bootstrap","webpack://final-practical/webpack/runtime/define property getters","webpack://final-practical/webpack/runtime/hasOwnProperty shorthand","webpack://final-practical/webpack/runtime/make namespace object","webpack://final-practical/./src/main.ts"],"sourcesContent":["// Fetches data from the Adoptable Creatures API\n// - type: The type of creature to fetch (e.g., \"cats\", \"dogs\", \"dragons\")\n// - callback: Function to run with the fetched data if successful\n// - errorCallback: Function to run with an error message if the request fails\n\ntype SuccessCallback = (param: object[]) => void;\ntype ErrorCallback = (param: string) => void;\n\nexport function getData(type: string, callback: SuccessCallback, errorCallback: ErrorCallback) {\n    const API_URL: string = \"https://people.rit.edu/anwigm/330/practical/api.php\";\n    // USING XML\n    // const xhr = new XMLHttpRequest();\n  \n    // // Open a GET request to the API\n    // xhr.open(\"GET\", `${API_URL}?type=${type}`, true);\n  \n    // // Handle the API response\n    // xhr.onload = function () {\n    //   if (xhr.status >= 200 && xhr.status < 300) {\n    //     try {\n    //       // Parse the response and call the success callback\n          \n    //         // YOU FILL IN THE CODE HERE TO PARSE THE RESPONSE AND\n    //         // STORE IT IN THE VARIABLE data.\n    //         const data = JSON.parse(xhr.responseText);\n\n    //       callback(data);\n    //     } catch (err) {\n    //       // Handle JSON parsing errors\n    //       errorCallback(\"Error parsing data from the server.\");\n    //     }\n    //   } else {\n    //     // Handle HTTP errors\n    //     errorCallback(\"Error fetching data from the server.\");\n    //   }\n    // };\n  \n    // // Handle network errors\n    // xhr.onerror = function () {\n    //   errorCallback(\"Network error occurred while fetching data.\");\n    // };\n  \n    // // Send the request\n    // xhr.send();\n\n    // USING FETCH\n    // try {\n    //   // fetch\n    //   const response = await fetch(`${API_URL}?type=${type}`);\n\n    //   // get data\n    //   const data = await response.json();\n\n    //   // check if response was okay\n    //   if (!response.ok) {\n    //     // throw error message\n    //     console.error(data.message);\n    //     errorCallback(\"Error with reading json: \", data.message)\n    //   }\n      \n    //   // callback\n    //   console.log(\"success\");\n    //   callback(data);\n    // }\n    // // if there is a problem\n    // catch (error) {\n    //   // callback error message\n    //   console.error(error);\n    //   errorCallback(\"Error fetching data from server: \", error);\n    // }\n\n    // ts cant use await/async\n    fetch(`${API_URL}?type=${type}`)\n\t    .then(response => {\n        // check if response is okay\n\t      if (!response.ok) {\n\t        throw new Error(\"HTTP error \" + response.status);\n        }\n\n        return response.json();\n      })\n      .then(data => {\n        // callback\n\t      callback(data);\n      }) // if error\n      .catch(error => {\n        console.error(error);\n\t      errorCallback(\"Error fetching data: \" + error.message);\n      });\n  }\n  \n  ","// Updates the DOM to display the fetched data\n// - data: An array of objects containing creature details\ninterface PetInfo {\n  picture: string,\n  name: string,\n  breed: string,\n  location: string\n}\n\nexport function renderResults(data) {\n    const resultsContainer = document.querySelector(\"#results\") as HTMLElement;\n    resultsContainer.innerHTML = '<div class=\"column is-one-quarter\">'; // Clear existing results\n  \n    data.forEach((item: PetInfo) => {\n      const card = document.createElement(\"div\") as HTMLElement;\n      card.className = \"result-card\";\n  \n      // Add content to the card\n      // card.innerHTML = `<div class=\"card\">\n      //   <img src=\"${item.picture}\" alt=\"${item.name}\" class=\"card-image\">\n      //   <h2>${item.name}</h2>\n      //   <p><strong>Breed:</strong> ${item.breed}</p>\n      //   <p><strong>Location:</strong> ${item.location}</p>\n      //   </div>\n      // `;\n\n      // bulma\n      card.innerHTML = `\n        <div class=\"card\">\n          <div class=\"card-image\">\n            <img src=\"${item.picture}\" alt=\"${item.name}\" class=\"image is-square\">\n          </div>\n          <div class=\"card-content\">\n            <div class=\"media\">\n              <div class=\"media-content\">\n                <p class=\"title is-4\">${item.name}</p>\n                <p class=\"subtitle is-6\"><strong>Breed: </strong>${item.breed}</p>\n              </div>\n              <div class=\"content\">\n                <strong>Location: </strong>${item.location}\n              </div>\n            </div>\n          </div>\n        </div>\n      `;\n  \n        // ADD THE LINE OF CODE HERE THAT WILL ADD THE CARD \n        // TO END OF THE RESULTS CONTAINER\n        resultsContainer.innerHTML += card.innerHTML;\n      \n    });\n    resultsContainer.innerHTML += '</div>';\n  }\n  \n  // Displays an error message on the page\n  // - message: The error message to show\n  export function showError(message: string): void {\n    const errorMessage = document.querySelector(\"#errorMessage\") as HTMLElement;\n    errorMessage.textContent = message;\n    errorMessage.classList.remove(\"hidden\"); // Make the error visible\n  }\n  \n  // Clears any visible error message from the page\n  export function clearError(): void {\n    const errorMessage = document.querySelector(\"#errorMessage\") as HTMLElement;\n    errorMessage.textContent = \"\";\n    errorMessage.classList.add(\"hidden\"); // Hide the error\n  }\n  ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Import functions from api.js and ui.js\nimport { getData } from \"./api\";\nimport { renderResults, showError, clearError } from \"./ui\";\n\n\ninterface PetInfo {\n  picture: string,\n  name: string,\n  breed: string,\n  location: string\n}\n   // ADD TWO LINES OF CODE HERE TO IMPORT THE getData FUNCTION from api.js\n   // AND THE THREE FUNCTIONS IN ui.js\n\n\n// Get references to the dropdown and button\nconst creatureTypeSelect = document.querySelector(\"#creatureType\") as HTMLSelectElement;\nconst getDataButton = document.querySelector(\"#getDataButton\") as HTMLButtonElement;\n\n// Set up event listener for the \"Get Data\" button\ngetDataButton.addEventListener(\"click\", () => {\n  const selectedType: string = creatureTypeSelect.value; // Get the selected type\n  clearError(); // Clear any existing error messages\n\n  // Fetch data for the selected type\n  getData(\n    selectedType,\n    (data) => {\n      renderResults(data); // Render the results on success\n    },\n    (errorMessage) => {\n      showError(errorMessage); // Show an error message on failure\n    }\n  );\n});\n"],"names":[],"sourceRoot":""}